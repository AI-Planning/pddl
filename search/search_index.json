{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pddl pddl aims to be an unquestionable and complete parser for PDDL 3.1. Install from PyPI: pip install pddl from source ( master branch): pip install git+https://github.com/whitemech/pddl.git or, clone the repository and install: git clone https://github.com/whitemech/pddl.git cd pddl pip install . Quickstart You can use the pddl package in two ways: as a library, and as a CLI tool. As a library This is an example of how you can build a PDDL domain or problem programmatically: from pddl.logic import Predicate, constants, variables from pddl.core import Domain, Problem, Action, Requirements from pddl.formatter import domain_to_string, problem_to_string # set up variables and constants x, y, z = variables(\"x y z\", types=[\"type_1\"]) a, b, c = constants(\"a b c\", types=[\"type_1\"]) # define predicates p1 = Predicate(\"p1\", x, y, z) p2 = Predicate(\"p2\", x, y) # define actions a1 = Action( \"action-1\", parameters=[x, y, z], precondition=p1(x, y, z) & ~p2(y, z), effect=p2(y, z) ) # define the domain object. requirements = [Requirements.STRIPS, Requirements.TYPING] domain = Domain(\"my_domain\", requirements=requirements, types=[\"type_1\"], constants=[a, b, c], predicates=[p1, p2], actions=[a1]) print(domain_to_string(domain)) that gives: (define (domain my_domain) (:requirements :strips :typing) (:types type_1) (:constants a b c) (:predicates (p1 ?x - type_1 ?y - type_1 ?z - type_1) (p2 ?x - type_1 ?y - type_1)) (:action action-1 :parameters (?x - type_1 ?y - type_1 ?z - type_1 ) :precondition (and (p1 ?x ?y ?z) (not (p2 ?y ?z))) :effect (p2 ?y ?z) ) ) As well as a PDDL problem: problem = Problem( \"problem-1\", domain=domain, requirements=requirements, objects=[a, b, c], init=[p1(a, b, c), ~p2(b, c)], goal=p2(b, c) ) print(problem_to_string(problem)) Output: (define (problem problem-1) (:domain my_domain) (:requirements :strips :typing) (:objects a - type_1 b - type_1 c - type_1) (:init (not (p2 b c)) (p1 a b c)) (:goal (p2 b c)) ) As CLI tool The package can also be used as a CLI tool. Supported commands are: - pddl domain FILE : validate a PDDL domain file, and print it formatted. - pddl problem FILE : validate a PDDL problem file, and print it formatted. Features Supported PDDL 3.1 requirements: [x] :strips [x] :typing [x] :negative-preconditions [x] :disjunctive-preconditions [x] :equality [ ] :existential-preconditions [ ] :universal-preconditions [ ] :quantified-preconditions [x] :conditional-effects [ ] :fluents [ ] :numeric-fluents [x] :non-deterministic (see 6th IPC: Uncertainty Part ) [ ] :adl [ ] :durative-actions [ ] :duration-inequalities [x] :derived-predicates [ ] :timed-initial-literals [ ] :preferences [ ] :constraints [ ] :action-costs Development If you want to contribute, here's how to set up your development environment. Install Pipenv Clone the repository: git clone https://github.com/whitemech/pddl.git && cd pddl Install development dependencies: pipenv shell --python 3.7 && pipenv install --dev Tests To run tests: tox To run only the code tests: tox -e py37 To run only the code style checks: tox -e flake8 Docs To build the docs: mkdocs build To view documentation in a browser: mkdocs serve and then go to http://localhost:8000 Authors Marco Favorito Francesco Fuggitti License pddl is released under the MIT License. Copyright (c) 2021-2022 WhiteMech Acknowledgements The pddl project is partially supported by the ERC Advanced Grant WhiteMech (No. 834228), the EU ICT-48 2020 project TAILOR (No. 952215), the PRIN project RIPER (No. 20203FFYLK), and the JPMorgan AI Faculty Research Award \"Resilience-based Generalized Planning and Strategic Reasoning\".","title":"Home"},{"location":"#install","text":"from PyPI: pip install pddl from source ( master branch): pip install git+https://github.com/whitemech/pddl.git or, clone the repository and install: git clone https://github.com/whitemech/pddl.git cd pddl pip install .","title":"Install"},{"location":"#quickstart","text":"You can use the pddl package in two ways: as a library, and as a CLI tool.","title":"Quickstart"},{"location":"#as-a-library","text":"This is an example of how you can build a PDDL domain or problem programmatically: from pddl.logic import Predicate, constants, variables from pddl.core import Domain, Problem, Action, Requirements from pddl.formatter import domain_to_string, problem_to_string # set up variables and constants x, y, z = variables(\"x y z\", types=[\"type_1\"]) a, b, c = constants(\"a b c\", types=[\"type_1\"]) # define predicates p1 = Predicate(\"p1\", x, y, z) p2 = Predicate(\"p2\", x, y) # define actions a1 = Action( \"action-1\", parameters=[x, y, z], precondition=p1(x, y, z) & ~p2(y, z), effect=p2(y, z) ) # define the domain object. requirements = [Requirements.STRIPS, Requirements.TYPING] domain = Domain(\"my_domain\", requirements=requirements, types=[\"type_1\"], constants=[a, b, c], predicates=[p1, p2], actions=[a1]) print(domain_to_string(domain)) that gives: (define (domain my_domain) (:requirements :strips :typing) (:types type_1) (:constants a b c) (:predicates (p1 ?x - type_1 ?y - type_1 ?z - type_1) (p2 ?x - type_1 ?y - type_1)) (:action action-1 :parameters (?x - type_1 ?y - type_1 ?z - type_1 ) :precondition (and (p1 ?x ?y ?z) (not (p2 ?y ?z))) :effect (p2 ?y ?z) ) ) As well as a PDDL problem: problem = Problem( \"problem-1\", domain=domain, requirements=requirements, objects=[a, b, c], init=[p1(a, b, c), ~p2(b, c)], goal=p2(b, c) ) print(problem_to_string(problem)) Output: (define (problem problem-1) (:domain my_domain) (:requirements :strips :typing) (:objects a - type_1 b - type_1 c - type_1) (:init (not (p2 b c)) (p1 a b c)) (:goal (p2 b c)) )","title":"As a library"},{"location":"#as-cli-tool","text":"The package can also be used as a CLI tool. Supported commands are: - pddl domain FILE : validate a PDDL domain file, and print it formatted. - pddl problem FILE : validate a PDDL problem file, and print it formatted.","title":"As CLI tool"},{"location":"#features","text":"Supported PDDL 3.1 requirements: [x] :strips [x] :typing [x] :negative-preconditions [x] :disjunctive-preconditions [x] :equality [ ] :existential-preconditions [ ] :universal-preconditions [ ] :quantified-preconditions [x] :conditional-effects [ ] :fluents [ ] :numeric-fluents [x] :non-deterministic (see 6th IPC: Uncertainty Part ) [ ] :adl [ ] :durative-actions [ ] :duration-inequalities [x] :derived-predicates [ ] :timed-initial-literals [ ] :preferences [ ] :constraints [ ] :action-costs","title":"Features"},{"location":"#development","text":"If you want to contribute, here's how to set up your development environment. Install Pipenv Clone the repository: git clone https://github.com/whitemech/pddl.git && cd pddl Install development dependencies: pipenv shell --python 3.7 && pipenv install --dev","title":"Development"},{"location":"#tests","text":"To run tests: tox To run only the code tests: tox -e py37 To run only the code style checks: tox -e flake8","title":"Tests"},{"location":"#docs","text":"To build the docs: mkdocs build To view documentation in a browser: mkdocs serve and then go to http://localhost:8000","title":"Docs"},{"location":"#authors","text":"Marco Favorito Francesco Fuggitti","title":"Authors"},{"location":"#license","text":"pddl is released under the MIT License. Copyright (c) 2021-2022 WhiteMech","title":"License"},{"location":"#acknowledgements","text":"The pddl project is partially supported by the ERC Advanced Grant WhiteMech (No. 834228), the EU ICT-48 2020 project TAILOR (No. 952215), the PRIN project RIPER (No. 20203FFYLK), and the JPMorgan AI Faculty Research Award \"Resilience-based Generalized Planning and Strategic Reasoning\".","title":"Acknowledgements"},{"location":"authors/","text":"Credits Maintainers Marco Favorito < favorito@diag.uniroma1.it > Francesco Fuggitti < fuggitti@diag.uniroma1.it > Contributors None yet. Why not be the first ?","title":"Credits"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#maintainers","text":"Marco Favorito < favorito@diag.uniroma1.it > Francesco Fuggitti < fuggitti@diag.uniroma1.it >","title":"Maintainers"},{"location":"authors/#contributors","text":"None yet. Why not be the first ?","title":"Contributors"},{"location":"changelog/","text":"Change Log 0.1.0 (2021-06-21) The first official release of pddl. Main features: * Specify PDDL domains and problems programmatically. * Parsing for PDDL domains and problems. 0.0.1 (2020-07-30) First commit on the package.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#010-2021-06-21","text":"The first official release of pddl. Main features: * Specify PDDL domains and problems programmatically. * Parsing for PDDL domains and problems.","title":"0.1.0 (2021-06-21)"},{"location":"changelog/#001-2020-07-30","text":"First commit on the package.","title":"0.0.1 (2020-07-30)"},{"location":"contributing/","text":"Contributing Contributions are welcome, and greatly appreciated! Every little bit helps, and credit will always be given. If you need support, want to report/fix a bug, ask for/implement features, you can check the Issues page or submit a Pull request . For other kinds of feedback, you can contact one of the authors by email.","title":"How to contribute"},{"location":"contributing/#contributing","text":"Contributions are welcome, and greatly appreciated! Every little bit helps, and credit will always be given. If you need support, want to report/fix a bug, ask for/implement features, you can check the Issues page or submit a Pull request . For other kinds of feedback, you can contact one of the authors by email.","title":"Contributing"},{"location":"references/","text":"References PDDL Resources , ICAPS Conference Bryce, Daniel, and Olivier Buffet. \"6th international planning competition: Uncertainty part.\" Proceedings of the 6th International Planning Competition (IPC\u201908) (2008).","title":"References"},{"location":"references/#references","text":"PDDL Resources , ICAPS Conference Bryce, Daniel, and Olivier Buffet. \"6th international planning competition: Uncertainty part.\" Proceedings of the 6th International Planning Competition (IPC\u201908) (2008).","title":"References"}]}