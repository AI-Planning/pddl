start: domain

domain:        LPAR DEFINE domain_def [require_def] [types_def] [constants_def] [predicates_def] structure_def* RPAR
domain_def:    LPAR DOMAIN NAME RPAR

require_def:               LPAR REQUIREMENTS require_key+ RPAR
require_key:               TYPING
           |               STRIPS
           |               EQUALITY
           |               NON_DETERMINISTIC
types_def:                 LPAR TYPES typed_list_name RPAR
constants_def:             LPAR CONSTANTS typed_list_name RPAR
predicates_def:            LPAR PREDICATES atomic_formula_skeleton+ RPAR
atomic_formula_skeleton:   LPAR NAME typed_list_variable RPAR


structure_def:     action_def
action_def:        LPAR ACTION NAME PARAMETERS LPAR typed_list_variable RPAR action_body_def RPAR
action_body_def:   [PRECONDITION emptyor_pregd] [EFFECT emptyor_effect]

// preconditions
emptyor_pregd:     LPAR RPAR
             |     gd
gd:                atomic_formula_term
  |                LPAR NOT atomic_formula_term RPAR
  |                LPAR AND gd* RPAR

// effects
emptyor_effect:    LPAR RPAR
              |    oneof_effect
oneof_effect:      LPAR ONEOF effect* RPAR
            |      effect
effect:            LPAR AND p_effect* RPAR
      |            p_effect
p_effect:          LPAR NOT atomic_formula_term RPAR
        |          atomic_formula_term

atomic_formula_term:   LPAR predicate term* RPAR
                   |   LPAR EQUAL_OP term term RPAR
term:  constant
    |  variable
predicate: NAME
constant: NAME

typed_list_variable:   variable*
                   |   variable+ "-" type_def (typed_list_variable)
variable: "?" NAME

typed_list_name:   NAME*
               |   NAME+ "-" type_def (typed_list_name)
type_def:          LPAR EITHER primitive_type+ RPAR
        |          primitive_type
primitive_type:    NAME
              |    OBJECT


NAME: /[a-zA-Z][a-zA-Z0-9-_]*/

DEFINE: "define"
DOMAIN: "domain"
REQUIREMENTS: ":requirements"
TYPES: ":types"
CONSTANTS: ":constants"
PREDICATES: ":predicates"
ACTION: ":action"
PARAMETERS: ":parameters"
PRECONDITION: ":precondition"
EFFECT: ":effect"
OBJECT: "object"
AND: "and"
NOT: "not"
EITHER: "either"
ONEOF: "oneof"
EQUAL_OP: "="

// available requirements
TYPING: ":typing"
EQUALITY: ":equality"
STRIPS: ":strips"
NON_DETERMINISTIC: ":non-deterministic"

// others
LPAR : "("
RPAR : ")"

%ignore /\s+/
