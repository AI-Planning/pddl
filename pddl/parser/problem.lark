start: pddl_problem

pddl_problem:    LSEPARATOR DEFINE pddl_problem_def pddl_problem_domain_def pddl_problem_objects_def pddl_init pddl_goal RSEPARATOR
pddl_problem_def:   LSEPARATOR PROBLEM NAME RSEPARATOR
pddl_problem_domain_def: LSEPARATOR DOMAIN_P NAME RSEPARATOR
pddl_problem_objects_def: [LSEPARATOR OBJECTS (<typed list (name)>)+ RSEPARATOR]
pddl_init: LSEPARATOR INIT (pddl_init_el)* RSEPARATOR

pddl_init_el:  literal NAME
pddl_init_el:  NAME



?ltlf_formula:     ltlf_equivalence
?ltlf_equivalence: ltlf_implication (EQUIVALENCE ltlf_implication)*
?ltlf_implication: ltlf_or (IMPLY ltlf_or)*
?ltlf_or:          ltlf_and (OR ltlf_and)*
?ltlf_and:         ltlf_until (AND ltlf_until)*
?ltlf_until:       ltlf_release (UNTIL ltlf_release)*
?ltlf_release:     ltlf_unaryop (RELEASE ltlf_unaryop)*

?ltlf_unaryop:     ltlf_always
             |     ltlf_eventually
             |     ltlf_next
             |     ltlf_weak_next
             |     ltlf_not
             |     ltlf_wrapped

?ltlf_always:      ALWAYS ltlf_unaryop
?ltlf_eventually:  EVENTUALLY ltlf_unaryop
?ltlf_next:        NEXT ltlf_unaryop
?ltlf_weak_next:   WEAK_NEXT ltlf_unaryop
?ltlf_not:         NOT ltlf_unaryop
?ltlf_wrapped:     ltlf_atom
             |     LSEPARATOR ltlf_formula RSEPARATOR
?ltlf_atom:        ltlf_symbol
          |        ltlf_true
          |        ltlf_false
          |        ltlf_last

ltlf_symbol: SYMBOL_NAME
ltlf_true: prop_true
ltlf_false: prop_false
ltlf_last: LAST

// Operators must not be part of a word
PROBLEM.2: /U(?=[^a-z]|$)/
RELEASE.2: /R(?=[^a-z]|$)/
ALWAYS.2: /G(?=[^a-z]|$)/
EVENTUALLY.2: /F(?=[^a-z]|$)/
NEXT.2: /X(?=[^a-z]|$)/
WEAK_NEXT.2: /WX(?=[^a-z]|$)/
LAST.2: /(?i:last)/

atom: SYMBOL_NAME
prop_true: TRUE
prop_false: FALSE

LSEPARATOR: "("
RSEPARATOR: ")"
EQUIVALENCE: "<->" | "<=>"
IMPLY: "->" | "=>"
OR: "||" | "|"
AND: "&&" | "&"
NOT: "!" | "~"
SYMBOL_NAME: /(\w+)|(".*")/
PROBLEM.2: /(?i:problem)/
DOMAIN_P.2: /(?i:\:domain)/
OBJECTS.2: /(?i:\:objects)/
INIT.2: /(?i\:init)/


%ignore /\s+/

// Symbols cannot contain uppercase letters, because these are reserved
SYMBOL_NAME: /[a-z][a-z0-9_]*/

%ignore /\s+/

%import .pl.prop_true -> prop_true
%import .pl.prop_false -> prop_false
%import .pl.NOT -> NOT
%import .pl.OR -> OR
%import .pl.AND -> AND
%import .pl.EQUIVALENCE -> EQUIVALENCE
%import .pl.IMPLY -> IMPLY
%import .pl.LSEPARATOR -> LSEPARATOR
%import .pl.RSEPARATOR -> RSEPARATOR